import os
import time
from typing import Any
import requests 
import json
import streamlit as st

from dotenv import load_dotenv

from langchain.chains import LLMChain
from langchain_groq import ChatGroq
from langchain.prompts import PromptTemplate 
from transformers import pipeline 

load_dotenv()


def generate_speech_from_text(message: str) -> Any:
    """
    A function using the ESPnet text to speech model from HuggingFace
    :param message: short story generated by the GPT model
    :return: generated audio from the short story
    """
    API_URL: str = "https://api-inference.huggingface.co/models/espnet/kan-bayashi_ljspeech_vits"
    headers: dict[str, str] = {"Authorization": f"Bearer {HUGGINGFACE_API_TOKEN}"}
    payloads: dict[str, str] = {
        "inputs": message
    }

    response: Any = requests.post(API_URL, headers=headers, json=payloads)
    with open("generated_audio.flac", "wb") as file:
        file.write(response.content)


def main():

    st.set_page_config(page_title= "IMAGE TO STORY CONVERTER", page_icon= "üñºÔ∏è")

    st.title('Image to Speech Generator')
    st.write('This app uses a combination of AI models to generate a short story from an image .')
    


if __name__ == "__main__":
    main()